AWSTemplateFormatVersion: '2010-09-09'
Description: Cognito Stack
Transform: 'AWS::Serverless-2016-10-31'




Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Name: BookStore_API
      Cors:
        AllowMethods: "'PUT,POST,OPTIONS'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  LambdaFunctionBookStore:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BookStoreFunction
      Handler: logic.handler
      Runtime: nodejs18.x
      Description: manage books
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Resource: !GetAtt DynamoDBTable.Arn
      Events:
        PutRestApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: PUT
        PostRestApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /addbook
            Method: POST

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Book_Table
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: book_id
          AttributeType: "N"
      KeySchema:
        - AttributeName: book_id
          KeyType: HASH


  #********************** Phase1 **********************
  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: BookStore_IdentityPool
      AllowUnauthenticatedIdentities: true
      SupportedLoginProviders:
        # replace with your google client Id......
        accounts.google.com: 444537954773-ukvvsi8ih2a42jrak9sgieebtkce8k17.apps.googleusercontent.com
        # replace with your twitter client Id and secret key......
        api.twitter.com: client_id;client_secret


  #********************** Phase2 **********************
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "AUTH_ROLE_COGNTIO"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "cognito-identity:*"
                  - "execute-api:Invoke"
                Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApi}/*


  #********************** Phase3 **********************
  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "UN_AUTH_ROLE_COGNTIO"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan"
                Resource: !GetAtt DynamoDBTable.Arn


  #********************** Phase4 **********************
  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn
